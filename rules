#!/usr/bin/make -f
#
# debian/rules for monotone, by Zack Weinberg
# Based on a public domain template, originally written by Joey Hess.

# put this up top so it's the default rule.
#
# Policy (section 4.9) says that build should depend on build-indep.
# However, this is only a "should", and it doesn't work, because
# dpkg-buildpackage uses build even in -B mode.  Thus, if build
# depends on build-indep, even a -B build will try to generate the
# manuals -- and the buildds will do this having installed only the
# Build-Depends, for they are ignorant of B-D-I.  All die, O the
# embarrassment.  (This has been a festering known problem for 
# nearly a *decade*, with no forward progress since 2007.  See bugs
# #218893 and #229357.)
#
# Conversely, not having build depend on build-indep means that if you
# do a normal dpkg-buildpackage, the manual gets generated in the
# binary-indep phase rather than the build phase, which works fine (as
# long as you are being sensible and using fakeroot, anyway; I haven't
# tried it with actual root privileges and don't propose to).
#
# (This is also the primary reason we aren't using "dh" yet; it only
# knows about the "build" target, not "build-arch"/"build-indep".)
build: build-arch
binary: binary-indep binary-arch

# patching
include /usr/share/quilt/quilt.make

# DEB_BUILD_OPTIONS handling

ifeq "$(findstring noopt,$(DEB_BUILD_OPTIONS))" ""
DEFAULT_CFLAGS = -g -O2
else # optimization disabled
DEFAULT_CFLAGS = -g -O0
endif
CFLAGS ?= $(DEFAULT_CFLAGS)

PAR := $(patsubst parallel=%,-j%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))


# Other tunables

# Thanks to buildd configuration decisions that no one will explain to
# me in sufficient detail to detect reliably, we have to disable all
# netsync tests until upstream gets around to converting them to local
# network sockets.
export DISABLE_NETWORK_TESTS = 1
export DH_VERBOSE = 1

# This is a hack to get more detail out of the alpha and sparc testsuite
# crashes.
export MTN_STACKTRACE_ON_CRASH = 1


# Building

config.status: configure
	dh_testdir
	$(MAKE) -f debian/rules patch
	[ -f config.sub.upstream ] || mv config.sub config.sub.upstream
	[ -f config.guess.upstream ] || mv config.guess config.guess.upstream
	cp -f /usr/share/misc/config.sub config.sub
	cp -f /usr/share/misc/config.guess config.guess
	dh_auto_configure -- CXXFLAGS="$(CFLAGS)" LDFLAGS="-Wl,-z,defs"

# We don't want to generate the info documentation in build-arch.
build-arch: build-arch-stamp
build-arch-stamp: config.status
	dh_auto_build -- $(PAR) INFO_DEPS=
	dh_auto_test -- $(PAR) INFO_DEPS= || sh contrib/dump-test-logs.sh
	touch $@

# Conversely, in build-indep all we want is the documentation.
build-indep: build-indep-stamp
build-indep-stamp: config.status
	make $(PAR) info html monotone.pdf
	touch $@

clean:
	dh_testdir
	dh_auto_clean
	dh_clean
	[ ! -f config.sub.upstream ] || mv -f config.sub.upstream config.sub
	[ ! -f config.guess.upstream ] || mv -f config.guess.upstream config.guess
	$(MAKE) -f debian/rules unpatch


# Architecture-dependent binary packages.

binary-arch: build-arch
	dh_testroot
	dh_prep
	dh_installdirs -a

# again, we don't want the documentation in this package; this pair of
# targets installs everything but
	$(MAKE) DESTDIR=$(shell pwd)/debian/monotone \
	    install-exec-am install-data-local

# dh_installdirs created etc/bash_completion.d.  dh_install cannot install
# a file under a different basename.
	cp contrib/monotone.bash_completion \
	   debian/monotone/etc/bash_completion.d/monotone

	dh_installdocs -a
# upstream file "ChangeLog" is not actually a change log
	dh_installchangelogs -a -X ChangeLog
	dh_installexamples -a
	dh_installman -a
	dh_compress -a
	dh_fixperms -a
	dh_strip -a
	dh_shlibdeps -a
	dh_installdeb -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a


# Architecture-independent binary packages.
#
# Both monotone-server and monotone-doc are permitted to have their
# documentation directories be symlinks to the main package's
# documentation directory, per Policy 12.5.  (We are tricksily having
# monotone-doc add to the contents of the main documentation
# directory.) This means we should not run dh_installexamples or
# dh_installchangelogs for either, and should not run dh_installdocs
# for monotone-server.  monotone-doc needs to run dh_installdocs for
# monotone.pdf and doc-base support, but this requires a few -X flags
# to avoid conflicting files.
#
# The upstream makefiles' install targets do nothing useful for these
# packages.  (In particular, we do not want the monolithic
# monotone.html installed.)  Annoyingly, at present we cannot simply
# dh_installdocs the entire html directory, because it contains a
# bunch of unwanted junk; instead we dh_installdirs the directory
# hierarchy that is required and use cp -p to put all the files in
# place.  (Using globs in monotone-doc.docs would get everything dumped
# directly into /usr/share/doc/monotone, which doesn't work.)

binary-indep: build-indep
	dh_testroot
	dh_prep

	dh_installdirs -i
	cd debian/monotone-doc/usr/share/doc && \
	    ln -s monotone monotone-doc
	cd debian/monotone-server/usr/share/doc && \
	    ln -s monotone monotone-server

	cp -p html/*.html html/*.css \
	    debian/monotone-doc/usr/share/doc/monotone/html
	cp -p html/figures/*.png \
	    debian/monotone-doc/usr/share/doc/monotone/html/figures
	dh_installdocs -p monotone-doc -X copyright -X NEWS

	cp -p examples/read-permissions \
	    debian/monotone-server/usr/share/monotone/read-permissions.base
	cp -p examples/write-permissions \
	    debian/monotone-server/usr/share/monotone/write-permissions.base
	cp -p contrib/get_passphrase_from_file.lua \
	    debian/monotone-server/usr/share/monotone/hooks.lua.base

	dh_installdebconf -i

# we should have logrotate support for monotone-server, but currently we don't
#	dh_installlogrotate -i --name=monotone
	dh_installinit -i --name=monotone
	dh_installinfo -i
	dh_compress -i -X .pdf
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

.PHONY: clean build build-arch build-indep binary binary-arch binary-indep

Backport upstream fix for an unreliable test.

ca9e27455b19faae0b4381613a18dec47a46b1de:
|   tests/spawn_redirected_hook_helper: Wait for subprocess from within
|   the hook, to eliminate a race with test directory cleanup.  Should
|   eliminate the race described in comments for Windows (I think it's the
|   same).  Fix what the hook does to be consistent across platforms.
|
1476420aff237c0c3f99a2eb295dffa1942b0e4b:
|   Fix inconsistent line endings in 
|   [tests/spawn_redirected_hook_helper/testhooks].

Index: monotone-0.43/tests/spawn_redirected_hook_helper/__driver__.lua
===================================================================
--- monotone-0.43.orig/tests/spawn_redirected_hook_helper/__driver__.lua	2009-01-17 06:15:43.000000000 -0800
+++ monotone-0.43/tests/spawn_redirected_hook_helper/__driver__.lua	2009-04-06 16:54:49.606798740 -0700
@@ -1,19 +1,10 @@
-skip_if(ostype == "Windows")
--- FIXME: this test broke on Windows when the change to running tests
--- in parallel was made. There appears to be a race condition in
--- waiting for the spawned test process; running under the debugger
--- with breaks after the spawn but before the wait makes the test work.
---
--- FIXME: on top of that, the Lua mechanisms can't handle the error;
--- win32/tester-plaf.cc run_tests_in_children returns status -1 to
--- test_cleaner; that eventually gets passed to ldo.cc
--- luaD_seterrorobj, which doesn't handle a status of -1, and
--- tester.exe just exits. So xfail won't work here either.
-
 mtn_setup()
 
 check(get("testhooks"))
 
 check(raw_mtn("--rcfile=testhooks", "ls", "unknown"), 0, false, false)
+
 skip_if(exists("skipfile"))
 check(exists("outfile"))
+check(exists("errfile"))
+check(exists("tofile"))
Index: monotone-0.43/tests/spawn_redirected_hook_helper/testhooks
===================================================================
--- monotone-0.43.orig/tests/spawn_redirected_hook_helper/testhooks	2009-01-17 06:15:43.000000000 -0800
+++ monotone-0.43/tests/spawn_redirected_hook_helper/testhooks	2009-04-06 16:55:17.795804329 -0700
@@ -1,24 +1,30 @@
 function ignore_file (name)
   ok = true
+  if existsonpath("cp") == 0 then
+    pid = spawn_redirected ("", "", "errfile",
+    	  		    "cp", "testhooks", "tofile")
+    if pid == -1 then ok = false end
+  elseif existsonpath("xcopy") == 0 then
+    pid = spawn_redirected ("", "", "errfile",
+    	  		    "xcopy", "/q", "/y", "testhooks", "tofile")
+    if pid == -1 then ok = false end
+  else
+    ok = false
+    x = io.open("skipfile", "w")
+    x:close()
+  end
 
   if ok then
-    if existsonpath("touch") == 0 then
-      pid = spawn_redirected ("", "", "xyzzy", "touch", "foofile")
-      if pid == -1 then ok = false end
-    elseif existsonpath("xcopy") == 0 then
-      pid = spawn_redirected ("", "", "xyzzy", "xcopy")
-      if pid == -1 then ok = false end
-    else
-      x = io.open("skipfile", "w")
-      x:close()
-    end
-  end
-  
+    res, ret = wait(pid)
+    if ret == -1 then ok = false end
+    if ret ~= 0 then ok = false end
+  end
+
   if ok then
     x = io.open("outfile", "w")
-    x:close()
+    x:close()
   end
 
   ignore_file = function (name) return true end
-return true
+  return true
 end
